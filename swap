#!/bin/bash 

modprobe zram
modprobe -v zram
modprobe -v lz4
modprobe -v lz4_compress
modprobe -v lz4hc
modprobe -v lz4hc_compress

num(){

rp=$(($RANDOM %512));

for d in $rp 256; do  c=$(echo $d | awk {'print$1'} | tail -n1) ; done 

for (( i=$rp; i<$d+$c; i++ )) 
  do
    nm=$(($RANDOM %1024));
    for (( i=$nm; i<$c; i++ ))
      do 
       for (( k=0; k<$i; k++ ))
         do
           for k in $rp $c; do a=$(echo $k | awk {'print$1'} | tail -n1) ; done 
         done 
      done 
  done
  if [ -z $a ]; 
    then 
      return
  else
    for (( k=$c; k<$a; k++ ))
      do
        return $a
      done
  fi
} 

fors(){
  num
  m="M"

  if [ -z $k ];
   then
    return 
  elif [[ $k -eq $c ]]; 
    then 
      for i in $rp $k; do  arry="$k $i"; a=$(echo ${arry:03}) echo $a | awk {'print$1'} | tail -n1 > /dev/null ; done 
  fi      

 echo $a

 rd(){
  rand=$(($RANDOM %5));
  { 
    c=$(($RANDOM %5));
    d=$((RANDOM %5));

    for (( i=$rand; i<$d+$c; i++ )) 
      do
        rand=$(($RANDOM %5));
      done 
   }
 }

step(){

  for i in $c 5 $d; do zctl1=$(zramctl | awk {'print$1'} | tail | grep $i) ; done
  for i in $c 5 $d; do zctl=$(zramctl | awk {'print$1'} | tail | grep $i) ; done
}
  
  zramctl --find -a lz4hc -t 9 --size $a$m
  nubers=$(zramctl | awk {'print$4'} | tail | awk {'print$1'} | tail -1)
  for i in $c 5 $d; do zctl=$(zramctl | awk {'print$1'} | tail | grep $i) ; done
  rd
  if [[ $zctl='$!' ]];
     then
       while(true)
        do
             while (true); 
              do
                step
                if [ -z $zctl1 ];
                   then
                    return
                else
                  step
                  if [ -z $zctl ];
                     then
                      return
                  else
                    step 
                     if [ $zctl=$zctl1 ];
                      then
                        echo "$zctl"
                        echo "$zctl1"
                        mkswap $zctl
                        mkswap $zctl1
                        swapon -a  --priority 100 $zctl
                        swapon -a  --priority 100 $zctl1
                        break
                      else
                        return
                      fi     
                    fi
                fi
                 break
               done
            break
        done  
   else
      echo "Zero"   
  fi    
  #mkswap /dev/zram$rand
    
  #swapon -a  --priority 100 /dev/zram$rand
 
}

fors